// Generated by CoffeeScript 1.4.0
var ContentCtrl, SegmentCtrl, browserCompatibleDocumentParser, documentParser, plane;

plane = angular.module('plane', []);

browserCompatibleDocumentParser = function() {
  var createDocumentUsingDOM, createDocumentUsingParser, createDocumentUsingWrite, testDoc, _ref;
  createDocumentUsingParser = function(html) {
    return (new DOMParser).parseFromString(html, 'text/html');
  };
  createDocumentUsingDOM = function(html) {
    var doc;
    doc = document.implementation.createHTMLDocument('');
    doc.documentElement.innerHTML = html;
    return doc;
  };
  createDocumentUsingWrite = function(html) {
    var doc;
    doc = document.implementation.createHTMLDocument('');
    doc.open('replace');
    doc.write(html);
    doc.close();
    return doc;
  };
  try {
    if (window.DOMParser) {
      testDoc = createDocumentUsingParser('<html><body><p>test');
      return createDocumentUsingParser;
    }
  } catch (e) {
    testDoc = createDocumentUsingDOM('<html><body><p>test');
    return createDocumentUsingDOM;
  } finally {
    if ((testDoc != null ? (_ref = testDoc.body) != null ? _ref.childNodes.length : void 0 : void 0) !== 1) {
      return createDocumentUsingWrite;
    }
  }
};

documentParser = browserCompatibleDocumentParser();

ContentCtrl = function($rootScope, $scope, $window, $location, $http, $element, $attrs, $compile, $document) {
  var changeContent, extractTitleAndContent, get, id, listners, onSuccess, options, parentScope, scope, transition, url;
  parentScope = $scope.$parent;
  scope = $scope;
  id = $attrs.id;
  url = $location.$$absUrl;
  options = {
    cache: false
  };
  extractTitleAndContent = function(doc) {
    var content, title;
    title = doc.querySelector('title');
    content = doc.querySelector("#" + id);
    if (!content) {
      content = doc.body;
    }
    return [title, content.children];
  };
  changeContent = function(title, content) {
    $document.prop('title', title != null ? title.textContent : void 0);
    $element.html("");
    $element.append(content);
    return $compile($element.contents())(scope);
  };
  onSuccess = function(data, status, headers) {
    var doc, _ref, _ref1;
    doc = documentParser(data);
    if ((_ref = $document.find("header")) != null) {
      if ((_ref1 = _ref[0]) != null) {
        _ref1.scrollIntoView(true);
      }
    }
    return changeContent.apply(null, extractTitleAndContent(doc));
  };
  transition = function(skip) {
    if (!skip) {
      $element.html("");
      return onSuccess;
    } else {
      return function(data, status, headers) {
        return onSuccess(data, status, headers);
      };
    }
  };
  get = function(transitionContent) {
    var callback;
    scope.$destroy();
    scope = parentScope.$new();
    callback = transition(!transitionContent);
    return $http.get("" + url + ".html", options).success(callback).error(callback);
  };
  listners = [];
  listners.push($rootScope.$on('$reloadContent', function() {
    return get(false);
  }));
  listners.push($rootScope.$on('$locationChangeSuccess', function(event, newUrl, oldUrl) {
    if (newUrl !== oldUrl) {
      url = newUrl;
      return get(true);
    }
  }));
  return parentScope.$on('$destroy', function() {
    var listner, _i, _len, _ref, _results;
    _ref = listners();
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      listner = _ref[_i];
      _results.push(listner());
    }
    return _results;
  });
};

ContentCtrl.$inject = ['$rootScope', '$scope', '$window', '$location', '$http', '$element', '$attrs', '$compile', '$document'];

plane.controller('ContentCtrl', ContentCtrl);

SegmentCtrl = function($scope, $timeout, $location, $http, $element, $attrs, $compile) {
  var duration, get, id, onError, onSuccess, options, parentScope, poll, promise, scope, url;
  parentScope = $scope.$parent;
  scope = $scope;
  id = $attrs.id;
  url = $location.$$absUrl;
  options = {
    cache: false,
    headers: {
      "Accept": "text/html"
    }
  };
  duration = Number($attrs.timeout || 30000);
  promise = false;
  get = function() {
    return $http.get(url, options).success(onSuccess).then(poll, onError);
  };
  poll = function() {
    if (!parentScope.$$destroyed) {
      return promise = $timeout(get, duration, true);
    }
  };
  onError = function() {
    return promise = $timeout(poll, 60000, true);
  };
  onSuccess = function(data) {
    var content, doc;
    scope.$destroy();
    scope = parentScope.$new();
    doc = documentParser(data);
    content = doc.querySelector("#" + id);
    $element.html("");
    $element.append(content.children);
    return $compile($element.contents())(scope);
  };
  parentScope.$on("$destroy", function() {
    return $timeout.cancel(promise);
  });
  return poll();
};

SegmentCtrl.$inject = ['$scope', '$timeout', '$location', '$http', '$element', '$attrs', '$compile'];

plane.controller('SegmentCtrl', SegmentCtrl);
